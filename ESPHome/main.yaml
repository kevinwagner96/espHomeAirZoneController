esphome:
  name: mega
  friendly_name: MEGA
  includes:
  - myCustomSensor.h
  on_boot:
    priority: 600
    then:
      - delay: 10s
esp8266:
  board: esp01_1m


logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: "4rrI4yr6XBsd/9KPb/KvSaAu7+oBB4+xxeHZU/4YciQ="

ota:
  - platform: esphome
    password: "ef64643c7ba0125210be1f531ea5cfea"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.0.120
    gateway: 192.168.0.1
    subnet: 255.255.255.0
  fast_connect: true

captive_portal:

uart:
  id: uart_1
  tx_pin: GPIO1  # Pin de transmisión (TX)
  rx_pin: GPIO3  # Pin de recepción (RX) - Opcional si solo vas a enviar datos
  baud_rate: 115200  # Velocidad de transmisión en baudios
    
text_sensor:
  - platform: custom
    lambda: |-
      auto my_sensor = new UartReadLineSensor(id(uart_1));
      App.register_component(my_sensor);
      return {my_sensor};
    text_sensors:
      name: "serial_line_sensor"

switch:
  - platform: template
    name: "Relay 1"
    id: relay_1
    restore_mode: RESTORE_DEFAULT_OFF
    icon: "mdi:power-socket"
    optimistic: true
    turn_on_action:
      - uart.write:
          id: uart_1
          data: !lambda |-
            char buf[10];
            sprintf(buf, "[1:ON]\r\n");
            std::string s = buf;
            return (std::vector<unsigned char>( s.begin(), s.end()));
    turn_off_action:
      - uart.write:
          id: uart_1
          data: !lambda |-
            char buf[10];
            sprintf(buf, "[1:OFF]\r\n");
            std::string s = buf;
            return (std::vector<unsigned char>( s.begin(), s.end()));

  - platform: template
    name: "Relay 2"
    id: relay_2
    restore_mode: RESTORE_DEFAULT_OFF
    icon: "mdi:power-socket"
    optimistic: true
    turn_on_action:
      - uart.write:
          id: uart_1
          data: !lambda |-
            char buf[10];
            sprintf(buf, "[2:ON]\r\n");
            std::string s = buf;
            return (std::vector<unsigned char>( s.begin(), s.end()));
    turn_off_action:
      - uart.write:
          id: uart_1
          data: !lambda |-
            char buf[10];
            sprintf(buf, "[2:OFF]\r\n");
            std::string s = buf;
            return (std::vector<unsigned char>( s.begin(), s.end()));


fan:
  - platform: template
    name: "Ventilacion Dormitorio 0"
    id: fan_0
    restore_mode: RESTORE_DEFAULT_OFF
    has_direction: false
    has_oscillating: false
    speed_count: 9 
    on_turn_on:
      then:
        - uart.write:
            id: uart_1
            data: !lambda |-
              int speed = id(fan_0).speed;
              char buf[20];
              sprintf(buf, "[F:0:%d]\r\n", (int) (speed*10));
              std::string s = buf;
              return (std::vector<unsigned char>( s.begin(), s.end()));
        
    on_turn_off:
      then:
        - uart.write:
            id: uart_1
            data: "[F:0:0]\r\n"
        
    on_speed_set:
      then:
        - uart.write:
            id: uart_1
            data: !lambda |-
              char buf[20];
              sprintf(buf, "[F:0:%d]\r\n", (int) (x*10));
              std::string s = buf;
              return (std::vector<unsigned char>( s.begin(), s.end()));
            
  - platform: template
    name: "Ventilacion Dormitorio 1"
    id: fan_1
    restore_mode: RESTORE_DEFAULT_OFF
    has_direction: false
    has_oscillating: false
    speed_count: 9 
    on_turn_on:
      then:
        - uart.write:
            id: uart_1
            data: !lambda |-
              int speed = id(fan_1).speed;
              char buf[20];
              sprintf(buf, "[F:1:%d]\r\n", (int) (speed*10));
              std::string s = buf;
              return (std::vector<unsigned char>( s.begin(), s.end()));
    on_turn_off:
      then:
        - uart.write:
            id: uart_1
            data: "[F:1:0]\r\n"
        
    on_speed_set:
      then:
        - uart.write:
            id: uart_1
            data: !lambda |-
              char buf[20];
              sprintf(buf, "[F:1:%d]\r\n", (int) (x*10));
              std::string s = buf;
              return (std::vector<unsigned char>( s.begin(), s.end()));

  # Repite la misma configuración para los ventiladores 2 a 9
  - platform: template
    name: "Ventilacion Dormitorio 2"
    id: fan_2
    restore_mode: RESTORE_DEFAULT_OFF
    has_direction: false
    has_oscillating: false
    speed_count: 9 
    on_turn_on:
      then:
        - uart.write:
            id: uart_1
            data: !lambda |-
              int speed = id(fan_2).speed;
              char buf[20];
              sprintf(buf, "[F:2:%d]\r\n", (int) (speed*10));
              std::string s = buf;
              return (std::vector<unsigned char>( s.begin(), s.end()));
    on_turn_off:
      then:
        - uart.write:
            id: uart_1
            data: "[F:2:0]\r\n"
    on_speed_set:
      - uart.write:
          id: uart_1
          data: !lambda |-
            char buf[20];
            sprintf(buf, "[F:2:%d]\r\n", (int) (x*10));
            std::string s = buf;
            return (std::vector<unsigned char>( s.begin(), s.end()));

  # Continúa de manera similar hasta fan_9
  - platform: template
    name: "Ventilacion Dormitorio 3"
    id: fan_3
    restore_mode: RESTORE_DEFAULT_OFF
    has_direction: false
    has_oscillating: false
    speed_count: 9 
    on_turn_on:
      then:
        - uart.write:
            id: uart_1
            data: !lambda |-
              int speed = id(fan_3).speed;
              char buf[20];
              sprintf(buf, "[F:3:%d]\r\n", (int) (speed*10));
              std::string s = buf;
              return (std::vector<unsigned char>( s.begin(), s.end()));
    on_turn_off:
      then:
        - uart.write:
            id: uart_1
            data: "[F:3:0]"
    on_speed_set:
      - uart.write:
          id: uart_1
          data: !lambda |-
            char buf[20];
            sprintf(buf, "[F:3:%d]\r\n", (int) (x*10));
            std::string s = buf;
            return (std::vector<unsigned char>( s.begin(), s.end()));

  - platform: template
    name: "Ventilacion Dormitorio 4"
    id: fan_4
    restore_mode: RESTORE_DEFAULT_OFF
    has_direction: false
    has_oscillating: false
    speed_count: 9 
    on_turn_on:
      then:
        - uart.write:
            id: uart_1
            data: !lambda |-
              int speed = id(fan_4).speed;
              char buf[20];
              sprintf(buf, "[F:4:%d]\r\n", (int) (speed*10));
              std::string s = buf;
              return (std::vector<unsigned char>( s.begin(), s.end()));
    on_turn_off:
      then:
        - uart.write:
            id: uart_1
            data: "[F:4:0]\r\n"
    on_speed_set:
      - uart.write:
          id: uart_1
          data: !lambda |-
            char buf[20];
            sprintf(buf, "[F:4:%d]\r\n", (int) (x*10));
            std::string s = buf;
            return (std::vector<unsigned char>( s.begin(), s.end()));

  - platform: template
    name: "Ventilacion Dormitorio 5"
    id: fan_5
    restore_mode: RESTORE_DEFAULT_OFF
    has_direction: false
    has_oscillating: false
    speed_count: 9 
    on_turn_on:
      then:
        - uart.write:
            id: uart_1
            data: !lambda |-
              int speed = id(fan_5).speed;
              char buf[20];
              sprintf(buf, "[F:5:%d]\r\n", (int) (speed*10));
              std::string s = buf;
              return (std::vector<unsigned char>( s.begin(), s.end()));
    on_turn_off:
      then:
        - uart.write:
            id: uart_1
            data: "[F:5:0]"
    on_speed_set:
      - uart.write:
          id: uart_1
          data: !lambda |-
            char buf[20];
            sprintf(buf, "[F:5:%d]\r\n", (int) (x*10));
            std::string s = buf;
            return (std::vector<unsigned char>( s.begin(), s.end()));

  - platform: template
    name: "Ventilacion Dormitorio 6"
    id: fan_6
    restore_mode: RESTORE_DEFAULT_OFF
    has_direction: false
    has_oscillating: false
    speed_count: 9 
    on_turn_on:
      then:
        - uart.write:
            id: uart_1
            data: !lambda |-
              int speed = id(fan_6).speed;
              char buf[20];
              sprintf(buf, "[F:6:%d]\r\n", (int) (speed*10));
              std::string s = buf;
              return (std::vector<unsigned char>( s.begin(), s.end()));
    on_turn_off:
      then:
        - uart.write:
            id: uart_1
            data: "[F:6:0]\r\n"
    on_speed_set:
      - uart.write:
          id: uart_1
          data: !lambda |-
            char buf[20];
            sprintf(buf, "[F:6:%d]\r\n", (int) (x*10));
            std::string s = buf;
            return (std::vector<unsigned char>( s.begin(), s.end()));

  - platform: template
    name: "Ventilacion Dormitorio 7"
    id: fan_7
    restore_mode: RESTORE_DEFAULT_OFF
    has_direction: false
    has_oscillating: false
    speed_count: 9 
    on_turn_on:
      then:
        - uart.write:
            id: uart_1
            data: !lambda |-
              int speed = id(fan_7).speed;
              char buf[20];
              sprintf(buf, "[F:7:%d]\r\n", (int) (speed*10));
              std::string s = buf;
              return (std::vector<unsigned char>( s.begin(), s.end()));
    on_turn_off:
      then:
        - uart.write:
            id: uart_1
            data: "[F:7:0]\r\n"
    on_speed_set:
      - uart.write:
          id: uart_1
          data: !lambda |-
            char buf[20];
            sprintf(buf, "[F:7:%d]\r\n", (int) (x*10));
            std::string s = buf;
            return (std::vector<unsigned char>( s.begin(), s.end()));
  - platform: template
    name: "Ventilacion Dormitorio 8"
    id: fan_8
    restore_mode: RESTORE_DEFAULT_OFF
    has_direction: false
    has_oscillating: false
    speed_count: 9 
    on_turn_on:
      then:
        - uart.write:
            id: uart_1
            data: !lambda |-
              int speed = id(fan_8).speed;
              char buf[20];
              sprintf(buf, "[F:8:%d]\r\n", (int) (speed*10));
              std::string s = buf;
              return (std::vector<unsigned char>( s.begin(), s.end()));
    on_turn_off:
      then:
        - uart.write:
            id: uart_1
            data: "[F:8:0]\r\n"
    on_speed_set:
      - uart.write:
          id: uart_1
          data: !lambda |-
            char buf[20];
            sprintf(buf, "[F:8:%d]\r\n", (int) (x*10));
            std::string s = buf;
            return (std::vector<unsigned char>( s.begin(), s.end()));
  - platform: template
    name: "Ventilacion Dormitorio 9"
    id: fan_9
    restore_mode: RESTORE_DEFAULT_OFF
    has_direction: false
    has_oscillating: false
    speed_count: 9 
    on_turn_on:
      then:
        - uart.write:
            id: uart_1
            data: !lambda |-
              int speed = id(fan_9).speed;
              char buf[20];
              sprintf(buf, "[F:9:%d]\r\n", (int) (speed*10));
              std::string s = buf;
              return (std::vector<unsigned char>( s.begin(), s.end()));
    on_turn_off:
      then:
        - uart.write:
            id: uart_1
            data: "[F:9:0]\r\n"
    on_speed_set:
      - uart.write:
          id: uart_1
          data: !lambda |-
            char buf[20];
            sprintf(buf, "[F:9:%d]\r\n", (int) (x*10));
            std::string s = buf;
            return (std::vector<unsigned char>( s.begin(), s.end()));
  





          